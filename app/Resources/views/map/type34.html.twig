
<div class="spacer"></div>

    <div class="hexagon table">
        <div class="hexagontent">

            {% for tile in map.tiles %}
                <div id="tile{{ tile.id }}" class="hexagon type{{ tile.type }}" style="
                        top: {{(100/8.9)*(3/20 + 1/2) + (100/8.9)*(tile.rowIndex - 1)*(1 + 3/20 + 1/2)}}%;
                        left:
                        {% if tile.rowIndex is divisible by(2) %}
                                {{ (100/5.6)*(0.15 + 1/2) + (100/5.6)*(tile.posIndex - 1)*1.1 }}%
                        {% else %}
                                {{ (100/5.6)*0.1 + (100/5.6)*(tile.posIndex - 1)*1.1 }}%
                        {% endif %}">
                    {% if tile.luckyNumber is not null %}
                    <div class="circle">
                        <div class="number n{{ tile.luckyNumber }}">{{ tile.luckyNumber }}</div>
                    </div>
                    {% endif %}
                </div>
            {% endfor %}

            {% for edge in map.edges %}
                <div id="edge{{ edge.id }}" class="edge" style="
                        transform: rotate({{edge.inclination}}deg);
                        top:
                        {% if edge.inclination() == 0 %}
                                {{ (100/8.9)*(3/20 + 1/2) + (100/8.9)*(edge.rowIndex - 1)*(1 + 3/20 + 1/2) }}%;
                        {% else %}
                                {{ (100/8.9)*(3/20 + 1/4 - 3/40 - 1/2) + (100/8.9)*(edge.rowIndex - 0.5)*(1 + 3/20 + 1/2) }}%;
                        {% endif %}
                        left:
                        {% if edge.inclination() == 0 %}
                            {% if edge.rowIndex is divisible by(2) %}
                                {{ (100/5.6)*(1/20 + 1/2) + (100/5.6)*(edge.posIndex - 0.5)*1.1 }}%
                            {% else %}
                                {{ (100/5.6)*(edge.posIndex - 0.5)*1.1 }}%
                            {% endif %}
                        {% elseif edge.inclination() == 60 %}
                                {{ (100/5.6)*(1/10 + 1/4 - 1/40 - 1/20) + (100/5.6)*(edge.posIndex - 0.5)*1.1 }}%
                        {% elseif edge.inclination == -60 %}
                                {{ (100/5.6)*(1/10 + 3/4 + 1/40 - 1/20) + (100/5.6)*(edge.posIndex - 1)*1.1 }}%
                        {% endif %}
                        ">

                </div>
            {% endfor %}

            {% for vertex in map.vertices %}
                <div id="vertex{{ vertex.id }}" class="vertex" style="
                        top:
                        {% if vertex.rowIndex|round == vertex.rowIndex|round(0, 'floor') %}
                                {{ (100/8.9)*(1/20) + (100/8.9)*(vertex.rowIndex - 0.3)*(1 + 1/2 + 3/20) }}%;
                        {% elseif vertex.rowIndex|round == vertex.rowIndex|round(0, 'ceil') %}
                                {{ (100/8.9)*(3/20 + 1/2 - 1/20) + (100/8.9)*(vertex.rowIndex - 0.7)*(1 + 1/2 + 3/20) }}%;
                        {% endif %}
                        left:
                        {% if vertex.rowIndex|round is not divisible by(2) %}
                                {{ (100/5.6)*(1/20) + (100/5.6)*(vertex.posIndex - 0.5)*1.1 }}%
                        {% elseif vertex.rowIndex|round is divisible by(2) %}
                                {{ (100/5.6)*(1/10 + 1/2) + (100/5.6)*(vertex.posIndex - 0.5)*1.1 }}%
                        {% endif %}
                        ">

                </div>

            {% endfor %}

            {% for vertex in map.mapEdgeConnectors34 %}
                <div class="mapEdgeConnector" style="
                        transform:
                        translate(-50%, -50%) rotate({{vertex[2]}}deg);
                        top:
                {% if vertex[0]|round == vertex[0]|round(0, 'floor') %}
                    {{ (100/8.9)*(1/20) + (100/8.9)*(vertex[0] - 0.3)*(1 + 1/2 + 3/20) }}%;
                {% elseif vertex[0]|round == vertex[0]|round(0, 'ceil') %}
                    {{ (100/8.9)*(3/20 + 1/2 - 1/20) + (100/8.9)*(vertex[0] - 0.7)*(1 + 1/2 + 3/20) }}%;
                {% endif %}
                        left:
                {% if vertex[0]|round is not divisible by(2) %}
                        {{ (100/5.6)*(1/20) + (100/5.6)*(vertex[1] - 0.5)*1.1 }}%
                {% elseif vertex[0]|round is divisible by(2) %}
                        {{ (100/5.6)*(1/10 + 1/2) + (100/5.6)*(vertex[1] - 0.5)*1.1 }}%
                {% endif %}
                        ">
                </div>
            {% endfor %}



        </div>
    </div>
